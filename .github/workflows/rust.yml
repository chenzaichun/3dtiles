name: Rust

on: [push]

jobs:
  create_release:
    name: Create release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Declare branch and sha
        id: vars
        shell: bash
        run: |
          echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
          echo "::set-output name=sha_short::$(echo ${GITHUB_SHA::7})"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.vars.outputs.branch }}-${{ steps.vars.outputs.sha_short }}
          release_name: Release ${{ steps.vars.outputs.branch }}-${{ steps.vars.outputs.sha_short }}
          draft: false
          prerelease: true

  build:
    runs-on: ${{ matrix.os }}
    needs: create_release
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        include:
          - os: ubuntu-latest
            zip_name: 3dtiles-ubuntu
          - os: windows-latest
            zip_name: 3dtiles-windows

    steps:
    - uses: actions/checkout@v1

    # create soft link for each platform
    - name: create linux link
      if: matrix.os == 'ubuntu-latest'
      run: |
          cd src
          ln -sf gdal_linux gdal
          ln -sf osg_linux osb
          sudo apt update && sudo apt install mesa-common-dev -y

    - name: create windows link
      if: matrix.os == 'windows-latest'
      shell: bash
      run: |
          export MSYS=winsymlinks:nativestrict
          cd src
          ln -sf gdal_windows gdal
          ln -sf osg_windows osg

    - name: Build for windows
      if: matrix.os == 'windows-latest'
      shell: bash
      run: |
        cargo build --verbose --release
        cp target/release/_3dtile.exe bin/
    
    - name: Build for linux
      if: matrix.os == 'ubuntu-latest'
      run: |
        cargo build --verbose --release
        cp target/release/_3dtile lib_glibc2.27/
    
    # - name: Run tests
    #   run: cargo test --verbose

    - name: Upload windows artifact
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v1.0.0
      with:
        # Artifact name
        name: _3dtile.exe
        # Directory containing files to upload
        path: bin/

    - name: Upload ubuntu artifact
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v1.0.0
      with:
        # Artifact name
        name: _3dtile
        # Directory containing files to upload
        path: lib_glibc2.27/

    - name: Create 3dtiles windows archive
      if: matrix.os == 'windows-latest'
      shell: bash
      env:
        ZIP_NAME: ${{ matrix.zip_name }}
      run: |
        mkdir artifact
        mv bin ${ZIP_NAME}
        7z a artifact/${ZIP_NAME}.zip ${ZIP_NAME}*

    - name: Create 3dtiles linux archive
      if: matrix.os == 'ubuntu-latest'
      shell: bash
      env:
        ZIP_NAME: ${{ matrix.zip_name }}
      run: |
        mkdir artifact
        mv lib_glibc2.27 ${ZIP_NAME}
        7z a artifact/${ZIP_NAME}.zip ${ZIP_NAME}*

    - name: Declare branch and sha
      id: vars
      shell: bash
      env:
        ZIP_NAME: ${{ matrix.zip_name }}
      run: |
        echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
        echo "::set-ouptut name=asset_name::$(echo ${ZIP_NAME}.zip)"
        echo "::set-ouptut name=asset_path::$(echo artifact/${ZIP_NAME}.zip)"

    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        ZIP_NAME: ${{ matrix.zip_name }}
      with:
        # upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        upload_url: ${{ needs.create_release.outputs.upload_url }}
        asset_path: ./artifact/${{ matrix.zip_name }}.zip
        asset_name: ${{ matrix.zip_name }}.zip
        asset_content_type: application/zip
